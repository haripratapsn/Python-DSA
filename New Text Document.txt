Data Structure in Python'

Data Structure the structure of the data in which it is stored and accessed efficiently.

A data structure is a built-in or user-defined way of organizing and storing data in Python so it can be accessed, updated, and processed efficiently. 

Implementation of Data Structure in Python 

Array -> List

Hash Table -> Dictionary

Linked List -> Not Available


______________________________________________________________________________________________________________________

Big O Notation is used to measure the space required by the program grow as input size increases.

Running Time :

The time taken to process the input and give output is running time.

Running time is the total time an algorithm takes to complete all of its operations, expressed as a function of the input size n.

for example if the size of an array is 100 and it take's 0.2 milliseconds to run
	and the if the size of a array is 1000 and it take's 2.2 milliseconds to run


the time taken to run this program is linearly proportional to the size of the array. so we can represent any linear representation as time=a*n + b.

the reason we don't use the time=a*n + b formula for the mathematical representation of because the time taken will differ as per the computer so it will not be constant result for the same program in different computer so we use some rules to represent it as a mathematical representation.

t = a*n + b

n → size of the input

a → Constant cost per input element (work done for each item).

b → Constant overhead (setup work that doesn’t depend on n)


t=a*n + b

Rule 1 :-

1. We only keep the fastest growing term

t=a*n

Rule 2 :-

1. Drop any constant numbers

t= O(n)


1st Example :- To get the square of n numbers

def get_square(l:list)->list:

	square_numbers=[]

	for number in l:

		number=number**2

		square_numbers.append(number)

	return square_numbers


In this program the loop runs for all the input numbers give in the list l
here the time complexity of the code is linear so the time complexity will be O(n)


2nd Example → Finding the duplicate from two list

def find_duplicate(l:list)→int:
	for i in range(len(l)):
		for j in range(len(l)):
			if l[i]==l[j]:
				print(l[i])
	break

in this the time complexity will be of O(n2) n square


if there are two or more loops the runtime complexity will O(n2)

if the input is the only one then the time complexity is O(1)

______________________________________________________________________________________________________________________

Space Complexity:-

Space Complexity is the measurement of the total amount of memory (or storage space) that an algorithm requires to run to completion.

for example to search a number in a list and to check whether it is present or not it will search the whole list which means n number in the list it will search n times , so if we take binary search algorithm first it will check the number is greater or less Dhan the middle value of the list then split the list into two parts and search for the number it will take less space for searching a value.

here in binary search the worst case scenario is that it will take O(logn) times iteration.



_____________________________________________________________________________________________________________________

Arrays

Arrays are most commonly used data structure in an programming language

Example :- 
To store apple stock price for 5 days and answer,

1. What was the price on day1 ?
2. What was the price on day3 ?


stock_price=[30,50,30,123,12312,123123123]
stock_price[0]
stock_price[2]

In the RAM or memory the value's are stored with the addresses assigned to them and it points to the variable

So each value space first the value is converted into binary number 
For an Integer number 4 bytes are used to store in many programming languages

 



 














	
